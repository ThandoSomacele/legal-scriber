import React, { useState, useRef, useEffect } from 'react';
import { FileText, Loader, ChevronDown } from 'lucide-react';

const TranscriptionDisplay = ({ transcribedText, onSummarize }) => {
  const [isSummarizing, setIsSummarizing] = useState(false);
  const [showScrollIndicator, setShowScrollIndicator] = useState(true);
  const transcriptionRef = useRef(null);

  // Placeholder text to simulate a longer transcription
  const placeholderText = `This is a placeholder for the transcribed text. In a real application, this would be the actual transcription of the audio file.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.`;

  useEffect(() => {
    const checkScroll = () => {
      const { scrollTop, scrollHeight, clientHeight } = transcriptionRef.current;
      setShowScrollIndicator(scrollTop < scrollHeight - clientHeight);
    };

    const transcriptionElement = transcriptionRef.current;
    transcriptionElement.addEventListener('scroll', checkScroll);
    checkScroll(); // Initial check

    return () => transcriptionElement.removeEventListener('scroll', checkScroll);
  }, []);

  const handleSummarize = async () => {
    setIsSummarizing(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      onSummarize(
        'This is a placeholder summary of the transcribed text. In a real application, this would be generated by sending the transcribed text to an AI model like ChatGPT.'
      );
    } catch (error) {
      console.error('Error summarizing text:', error);
      onSummarize('An error occurred while summarizing the text.');
    } finally {
      setIsSummarizing(false);
    }
  };

  return (
    <div className='bg-white shadow-md rounded-lg p-6'>
      <h2 className='text-2xl font-semibold text-primary-700 mb-4 flex items-center'>
        <FileText className='mr-2' />
        Transcription
      </h2>

      <div className='relative'>
        <div
          ref={transcriptionRef}
          className='bg-secondary-50 p-4 rounded-md mb-6 h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-300 scrollbar-track-secondary-100'>
          <p className='text-secondary-800 whitespace-pre-wrap text-left'>{transcribedText || placeholderText}</p>
        </div>
        {showScrollIndicator && (
          <div className='absolute bottom-0 left-0 right-0 flex justify-center pb-2 pointer-events-none animate-bounce'>
            <div className='bg-primary-600 rounded-full p-2 shadow-lg'>
              <ChevronDown className='text-white w-6 h-6' />
            </div>
          </div>
        )}
      </div>

      <button
        onClick={handleSummarize}
        disabled={isSummarizing}
        className='bg-primary-600 text-white py-2 px-4 rounded-md hover:bg-primary-700 transition-colors duration-300 disabled:bg-primary-300 disabled:cursor-not-allowed flex items-center justify-center'>
        {isSummarizing ? (
          <>
            <Loader className='animate-spin mr-2' size={18} />
            Summarising...
          </>
        ) : (
          'Summarise'
        )}
      </button>
    </div>
  );
};

export default TranscriptionDisplay;
